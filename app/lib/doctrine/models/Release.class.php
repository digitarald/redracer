<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Release extends BaseRelease
{
	/**
   * toArray
   *
   * @param      boolean $deep - Return also the relations
   * @return     array
   */
	public function toArray($deep = false, $prefixKey = false)
	{
		$ret = parent::toArray($deep, $prefixKey);

		if (!isset($ret['version'])) {
			return $ret;
		}

		if ($ret['notes']) {
			$ret['notes_html'] = RedString::format($ret['notes'], 4);
		}
		if ($ret['changelog']) {
			$ret['changelog_html'] = RedString::detectLinks($ret['changelog'], 50);
		}

		$ret['repository_dir'] = $this->getRepositoryDir();

		// I feel dirty
		$ret['recommended'] = (string) ($ret['recommended'] + 0);

		$ret['stability_text'] = $this->getStabilityText();

		$ret['url_view'] = $this->getContext()->getRouting()->gen('resources.resource.releases.release.view', array(
			'resource' => $this['resource']['ident'],
			'release' => $ret['id']
		));
		$ret['url_edit'] = $this->getContext()->getRouting()->gen('resources.resource.releases.release.edit', array(
			'resource' => $this['resource']['ident'],
			'release' => $ret['id']
		));

		return $ret;
	}

	public function fromRequest(AgaviRequestDataHolder $rd)
	{
		$this['version'] = $rd->getParameter('version');
		$this['notes'] = $rd->getParameter('notes');
		$this['stability'] = (string) $rd->getParameter('stability', 0);
		$this['hosted'] = (string) $rd->getParameter('hosted', 0);
		$this['changelog'] = $rd->getParameter('changelog');
		$this['url_source'] = $rd->getParameter('url_source');
		$this['url_notes'] = $rd->getParameter('url_notes');
		$this['url_download'] = $rd->getParameter('url_notes');

		$this->setFlagMask($rd->getParameter('flag', array()));

		if ($rd->getParameter('recommended') && !$this['recommended']) {
			$q = new Doctrine_Query();
			$q->update('Release release');
			$q->set('release.recommended', '0');
			$q->where('release.recommended = 1');
			$q->execute();
			$this['recommended'] = '1';
		}
	}

  public function postInsert($event)
	{
		AgaviToolkit::mkdir($this->getRepositoryDir());
	}

  public function postDelete($event)
	{
		$dir = $this->getRepositoryDir();
		if (is_dir($dir)) {
			unlink($dir);
		}
	}

	/**
	 * getRepositoryDir
	 *
	 * @return     string
	 */
	public function getRepositoryDir()
	{
		return $this['resource']->getRepositoryDir() . '/' . $this['id'];
	}

	public function getStabilityText()
	{
		return Resource::$stabilities[$this['stability']];
	}

	public function getFlagMask()
	{
		$flag = (int) $this['flag'];
		$mask = array();
		foreach (self::$flags as $bit => $text) {
			if ($flag & $bit) {
				$mask[] = $bit;
			}
		}
		return $mask;
	}

	public function setFlagMask(array $mask)
	{
		$bits = 0;
		foreach ($mask as $bit) {
			$bits .= $bit;
		}
		$this['flag'] = (string) $bits;
	}
}