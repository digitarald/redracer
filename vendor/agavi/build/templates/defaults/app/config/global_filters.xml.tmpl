<?xml version="1.0" encoding="UTF-8"?>
<configurations xmlns="http://agavi.org/agavi/1.0/config">

	<!-- this section is only for web contexts -->
	<configuration context="web">
		<filters>

			<filter name="FormPopulationFilter" class="AgaviFormPopulationFilter">
				
				<!-- only run for request method "write" (=POST on web) by default (can be changed at runtime, of course) -->
				<!-- if you omit this, it will never run -->
				<parameter name="methods">
					<parameter>write</parameter>
				</parameter>
				
				<!-- only run for output type "html" (so it doesn't break on, say, JSON data) -->
				<!-- if you omit this, it will run for all output types -->
				<parameter name="output_types">
					<parameter>html</parameter>
				</parameter>
				
				<!-- error message insertion rules -->
				<!-- they are run in sequence; once the first one matched, execution stops -->
				<!--
					errors that belong to more than one field (e.g. date validator) can be handled using "multi_field_error_messages"
					"normal" errors are handled through "field_error_messages"
					errors that yield no match and those that have no corresponding field are inserted using rules defined in "error_messages".
				-->
				
				<!--
					for all field error messages.
				-->
				<parameter name="field_error_messages">
					<!-- ${htmlnsPrefix} is either empty (for HTML) or something like "html:" for XHTML documents with xmlns="..." notation. Always use this, makes your code more bullet proof. XPath needs the namespaces when the document is namespaced -->
					
					<!-- all input fields that are not checkboxes or radios, and all textareas -->
					<parameter name="self::${htmlnsPrefix}input[not(@type='checkbox' or @type='radio')] | self::${htmlnsPrefix}textarea">
						<!-- if this rule matched, then the node found by the rule is our starting point for inserting the error message(s). -->
						
						<!-- can be any of "before", "after" or "child" (to insert as prev, next sibling or last child) -->
						<parameter name="location">after</parameter>
						<!-- a container groups all errors for one element. ${errorMessages} is a string containing all errors (see below) -->
						<parameter name="container"><![CDATA[<div class="errors">${errorMessages}</div>]]></parameter>
						<!-- this defines the HTML for each individual error message; those are then put into the container. ${errorMessage} is the error message string -->
						<parameter name="markup"><![CDATA[<p class="error">${errorMessage}</p>]]></parameter>
					</parameter>
					
					<!-- all other inputs - note how we select the parent element and insert ourselves as last child of it -->
					<parameter name="parent::*">
						<parameter name="location">child</parameter>
						<parameter name="container"><![CDATA[<div class="errors">${errorMessages}</div>]]></parameter>
						<parameter name="markup"><![CDATA[<p class="error">${errorMessage}</p>]]></parameter>
					</parameter>
				</parameter>
				
				<!--
				<parameter name="multi_field_error_messages">
				</parameter>
				-->
				
				<!-- everything that did not match any of the rules above, or errors that do not belong to a field -->
				<parameter name="error_messages">
					<!-- insert before the element -->
					<!-- that can be an input, or a form, if the error does not belong to a field or didn't match anywhere else -->
					<parameter name="self::*">
						<parameter name="location">before</parameter>
						<!-- no container here! we just insert paragraph elements -->
						<parameter name="markup"><![CDATA[<p class="error">${errorMessage}</p>]]></parameter>
					</parameter>
				</parameter>
				
			</filter>

			<!-- <filter name="TidyFilter" class="AgaviTidyFilter">
				<parameter name="tidy_options">
					<parameter name="output-xhtml">true</parameter>
					<parameter name="numeric-entities">true</parameter>
				</parameter>
				<parameter name="tidy_encoding">utf8</parameter>
			</filter> -->

		</filters>

	</configuration>

</configurations>